#include "Windows.hpp"
#include "Mesh.hpp"
#include "Color.hpp"
#include "Matrix.hpp"
#include "Math.hpp"
#include <iostream>

int main(void)
{
	Windows win(800, 600, "HumanGL");
	win.setClearColor(Color::White);

	Mesh mesh;
	Shader shader("resources/default.frag" ,"resources/default.vert");

	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LESS);
	//glEnable(GL_CULL_FACE);
	//glCullFace(GL_FRONT);
	//glFrontFace(GL_CCW);
	//glEnable(GL_LIGHTING);
	//glEnable(GL_FOG);
	//glDepthMask(GL_TRUE);
	//glDisable(GL_LIGHTING);
	//glDisable(GL_FOG);
	Matrix		m_model;
	Matrix		m_parent;
	Matrix		m_view;
	Matrix		m_projection;

	m_model.scale(Vector3(1.f, 0.3f, 1.2f));
	m_parent.translate(Vector3(1.f, 1.f, 0.f));

	glfwSetTime(0.f);
	float lastTime = 0.f;
	while (win.isOpen())
	{
		// Compute frametime
		float currentTime = glfwGetTime();
		float frameTime = (currentTime - lastTime);
		lastTime = currentTime;

		// Update
		if (glfwGetKey(win.getWindow(), GLFW_KEY_ESCAPE) == GLFW_PRESS)
			win.close();

	float r = 0.f;
		r += 30.f * frameTime;
		// Draw
		win.clear();
		// update uniforms shaders
		//m_parent.identity();
		//m_model.identity();
		//m_model.rotateY(r);
		//m_model.translate(Vector3(-0.5f, -1.f, -0.5f));
		m_parent.translate(Vector3(-1.f, -1.f, -0.f));
		//m_model.multiply(m_parent.inverse());
		//m_model.translate(Vector3(-0.5f * frameTime, -2.f * frameTime, -0.5f * frameTime));
		m_model.rotateX(r);
		//m_model.translate(Vector3(-0.5f, -1.f, -0.5f));
		m_model.multiply(m_parent);
		m_parent.translate(Vector3(1.f, 1.f, 0.f));
		//glUniformMatrix4fv(m_uniforms[0], 1, GL_FALSE, m_model.getMatrix());
		shader.setParameter("ModelMatrix", m_model);
		m_view.identity();
		m_view.translate(Vector3(0.f, 0.f, -3.f));
		//glUniformMatrix4fv(m_uniforms[1], 1, GL_FALSE, m_view.getMatrix());
		shader.setParameter("ViewMatrix", m_view);
		m_projection.identity();
		m_projection.perspectiveProjection(60.f, 800.f/600.f, 1.f, 100.f);
		//glUniformMatrix4fv(m_uniforms[2], 1, GL_FALSE, m_projection.getMatrix());
		shader.setParameter("ProjectionMatrix", m_projection);

		mesh.draw();
		//glUseProgram(0);

		win.display();
		win.pollEvents();
	}
	return (0);
}
